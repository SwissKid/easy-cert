#!/bin/bash
#Hopefully this configures EVERYTHING automagically.
source /etc/easy-certs
echo "This will be executing with $base_directory as the base directory." \
"If this is wrong, hit control-C NOW!"

echo -e "What is the purpose of this Certificate? \n 1) TLS \n 2)SSL"
read purpose
case $purpose in 
    1)	read -p "Client or Server: " type
	type=${type,,}
	[[ $type == s ]] && type="server"
	[[ $type == c ]] && type="client"
	if [[ $type == "server" ]] || [[ $type == "client" ]]
	    then
		echo "Configuring as ${type,,}."
	    else
		echo "$type is not 'Client' or 'Server'"
		exit 1
	    fi
	read -p "$type's Friendly name (Common name, but doesn't have to match FQDN)" client_cn
	read -p "$type's DNS Domain Name: " client_fqdn;;
    2)	type="server"
	read -p "$type's FQDN? (without . at end, remember wildcards if wanted): " client_fqdn
	client_cn=$client_fqdn;;
    *)	echo "$purpose is not 1 or 2. Please try again later...." >&2 ; exit 1;;
esac
guess_name="${client_fqdn%%.$default_domain.}"
read -p "$type's shortname (used for files) [$guess_name]: " shortname
read -p "Requesting User: " requesting_user
read -p "Their email [$requesting_user@$default_domain]: " user_email
read -e -p "Location of CA files [$default_ca_location]: " ca_location
[ -z "$ca_location" ] && ca_location="$default_ca_location"
if [[ ! -d "$ca_location" ]]
    then echo "$ca_location isn't a directory!" >&2 
    exit 1
fi
read -e -p "Serial Number (hex, defaults to 01): " serial_number
read -p "Generate key? [y/N] " genkey
shortname=${shortname:-$guess_name}
user_email=${user_email:-"$requesting_user@$default_domain"}
serial_number=${serial_number:-01}
genkey=${genkey:-n}
working_directory="$base_directory/$type"s"/$shortname"
##the -p flag is partially so it doesn't complain
mkdir "$working_directory" -p
key="$working_directory/$shortname""_key.pem"
case $genkey in
	[yY]*) certtool --generate-privkey > "$key";;
	[nN]*) read -e -p "Path to client's key: " keyloc; cp "$keyloc" "$key" ;;
	*) echo "$genkey is not Y or N, please try again next time..." >&2 ; exit 1 ;;
    esac
cert="$working_directory/$shortname""_certificate.pem"
info="$working_directory/$shortname.info"
echo "Generating $info"
cat > $info << END_OF_INFO

serial = $serial_number
country = $country
state = $state
locality = $locality
organization = "$organization"
unit = "${type^}"
dns_name = "$client_fqdn"
#Only if wanted
#email = "$user_email"
expiration_days = 365
cn = $client_cn
tls_www_$type
encryption_key
signing_key

END_OF_INFO

cat $info

echo -e "\033[41;1m\033[32;1mIs this info correct and OK? [y/n]\033[01;0m"
read lastchance
case $lastchance in
	[yY])continue;;
	*)echo "cancelled" >&2; exit 1;; 
esac


if [ -e "$info" ]
    then 
	[ -e "$key" ]  || certtool --generate-privkey > $key
	certtool --generate-certificate \
	--template $info \
	--load-privkey $key \
	--load-ca-certificate $ca_location/ca_certificate.pem \
	--load-ca-privkey $ca_location/ca_key.pem \
	--outfile $cert
	cp $ca_location/ca_certificate.pem $working_directory/CA.crt
    else 
	echo "Something's missing! Check your files, the info file and the certificate auth location" >&2 
	exit 1
fi



